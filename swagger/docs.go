// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-11-05 16:35:08.0024189 +0700 +07 m=+0.019988701

package swagger

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

/**
 * HEALTHY MANAGEMENT - line 36
 * ...continue
 */

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
	"securityDefinitions": {
      	"jwt-service": {
        	"type": "apiKey",
        	"name": "Authorization",
        	"in": "header",
        	"authenticationScheme": "Bearer"
      	}
    },
	"security": [{ "jwt-service": [] }],
    "produces": ["application/json"],
    "paths": {
		"/v1/status": {
			"get": {
			  	"tags": ["Healthy"], "summary": "Healthy", "produces": [ "application/json"], "parameters": [], "responses": {}
			}
      	},
		"/v1/info": {
			"get": {
			  	"tags": ["Info"], "summary": "Information", "produces": [ "application/json"], "parameters": [], "responses": {}
			}
      	},
		"/v1/users/log_in": {
			"post": {
				"tags": ["Authentication"], "summary": "Log in", "produces": [ "application/json"],
				"parameters": [{
					"in": "body", "name": "body", "required": true,
					"schema": { "$ref": "#/definitions/LogInForm" }
				}],
				"responses": {}
			}
      	},
		"/v1/users": {
			"post": {
				"tags": ["User"], "summary": "Register new user", "produces": [ "application/json"],
				"parameters": [{
					"in": "body", "name": "body", "required": true,
					"schema": { "$ref": "#/definitions/UserCreateForm" }
				}],
				"responses": {}
			}
      	},
		
		"/v1/users/tasks": {
			"get": {
			  	"tags": ["User"], "summary": "List tasks", "produces": [ "application/json"], "parameters": [], "responses": {}
			},
			"post": {
				"tags": ["User"], "summary": "Add a task", "produces": [ "application/json"],
				"parameters": [{
					"in": "body", "name": "body", "required": true,
					"schema": { "$ref": "#/definitions/UserAddTaskForm" }
				}],
				"responses": {}
			}
      	}
	},
	"definitions": {
		"LogInForm": {
			"type": "object",
			"properties": {
				"id": { "type": "string", "example": "firstUser" },
				"password": { "type": "string", "example": "example" }
			},
			"xml": { "name": "LogInForm" }
		},
		"UserCreateForm": {
			"type": "object",
			"properties": {
				"id": { "type": "string", "example": "firstUser" },
				"password": { "type": "string", "example": "example" },
				"max_todo": { "type": "number", "example": 5 }
			},
			"xml": { "name": "UserCreateForm" }
		},
		"UserAddTaskForm": {
			"type": "object",
			"properties": {
				"content": { "type": "string", "example": "content" }
			},
			"xml": { "name": "UserAddTaskForm" }
		}
	}
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.1",
	Schemes:     []string{},
	Title:       "Manabie Interview API",
	Description: "This is a documents api",
	BasePath:    "/interview",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
